// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: improbable/ext/plugin/auth/perms.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Perms {

  /// <summary>Holder for reflection information generated from improbable/ext/plugin/auth/perms.proto</summary>
  public static partial class PermsReflection {

    #region Descriptor
    /// <summary>File descriptor for improbable/ext/plugin/auth/perms.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PermsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZpbXByb2JhYmxlL2V4dC9wbHVnaW4vYXV0aC9wZXJtcy5wcm90bxIFcGVy",
            "bXMaIGdvb2dsZS9wcm90b2J1Zi9kZXNjcmlwdG9yLnByb3RvIjIKClBlcm1p",
            "c3Npb24SEgoIcmVzb3VyY2UY86MEIAEoCRIQCgZhY3Rpb24Y9KMEIAEoCSJy",
            "CgpEZWxlZ2F0aW9uEgwKBG5hbWUYASABKAkSFQoNcGVybWlzc2lvbl92MRgC",
            "IAEoCRIoCg1wZXJtaXNzaW9uX3YyGAMgASgLMhEucGVybXMuUGVybWlzc2lv",
            "bhIVCg1lcnJvcl9tZXNzYWdlGAQgASgJOkUKCHJlcXVpcmVkEh4uZ29vZ2xl",
            "LnByb3RvYnVmLk1ldGhvZE9wdGlvbnMY8qMEIAMoCzIRLnBlcm1zLlBlcm1p",
            "c3Npb246RgoJZGVsZWdhdGVkEh4uZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9w",
            "dGlvbnMY86MEIAMoCzIRLnBlcm1zLkRlbGVnYXRpb246NgoMbm90X3JlcXVp",
            "cmVkEh4uZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMY9KMEIAEoCEIw",
            "Wi5pbXByb2JhYmxlLmlvL3Byb3RvL2ltcHJvYmFibGUvZXh0L3BsdWdpbi9h",
            "dXRoYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.Reflection.DescriptorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pb::Extension[] { PermsExtensions.Required, PermsExtensions.Delegated, PermsExtensions.NotRequired }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Perms.Permission), global::Perms.Permission.Parser, new[]{ "Resource", "Action" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Perms.Delegation), global::Perms.Delegation.Parser, new[]{ "Name", "PermissionV1", "PermissionV2", "ErrorMessage" }, null, null, null, null)
          }));
    }
    #endregion

  }
  /// <summary>Holder for extension identifiers generated from the top level of improbable/ext/plugin/auth/perms.proto</summary>
  public static partial class PermsExtensions {
    public static readonly pb::RepeatedExtension<global::Google.Protobuf.Reflection.MethodOptions, global::Perms.Permission> Required =
      new pb::RepeatedExtension<global::Google.Protobuf.Reflection.MethodOptions, global::Perms.Permission>(70130, pb::FieldCodec.ForMessage(561042, global::Perms.Permission.Parser));
    public static readonly pb::RepeatedExtension<global::Google.Protobuf.Reflection.MethodOptions, global::Perms.Delegation> Delegated =
      new pb::RepeatedExtension<global::Google.Protobuf.Reflection.MethodOptions, global::Perms.Delegation>(70131, pb::FieldCodec.ForMessage(561050, global::Perms.Delegation.Parser));
    /// <summary>
    //// If set to true, it is implied that there is no permission requirement. This exists to distinguish RPCs with open
    //// permissions from RPCs which have not yet had permissions defined.
    /// </summary>
    public static readonly pb::Extension<global::Google.Protobuf.Reflection.MethodOptions, bool> NotRequired =
      new pb::Extension<global::Google.Protobuf.Reflection.MethodOptions, bool>(70132, pb::FieldCodec.ForBool(561056, false));
  }

  #region Messages
  /// <summary>
  ///*
  /// Permission contains the resource and action descriptors that a user must be authorised for in order
  /// to run a particular method.
  /// </summary>
  public sealed partial class Permission : pb::IMessage<Permission> {
    private static readonly pb::MessageParser<Permission> _parser = new pb::MessageParser<Permission>(() => new Permission());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Permission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Perms.PermsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Permission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Permission(Permission other) : this() {
      resource_ = other.resource_;
      action_ = other.action_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Permission Clone() {
      return new Permission(this);
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 70131;
    private string resource_ = "";
    /// <summary>
    //// A resource which the user must be authorised to access e.g: "irn:iam:{{.Req.Org}}:organisation:"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resource {
      get { return resource_; }
      set {
        resource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 70132;
    private string action_ = "";
    /// <summary>
    //// An action which the user must be authorised to perform e.g: "read"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Permission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Permission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Resource != other.Resource) return false;
      if (Action != other.Action) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Resource.Length != 0) hash ^= Resource.GetHashCode();
      if (Action.Length != 0) hash ^= Action.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Resource.Length != 0) {
        output.WriteRawTag(154, 159, 34);
        output.WriteString(Resource);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(162, 159, 34);
        output.WriteString(Action);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Resource.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(Resource);
      }
      if (Action.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Permission other) {
      if (other == null) {
        return;
      }
      if (other.Resource.Length != 0) {
        Resource = other.Resource;
      }
      if (other.Action.Length != 0) {
        Action = other.Action;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 561050: {
            Resource = input.ReadString();
            break;
          }
          case 561058: {
            Action = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Delegation describes permissions which we would like to check, but will not be automatically
  /// checked by middleware. These delegations will be generated and can be called from application
  /// code where more nuance checks are required.
  ///
  /// For example, this delegation will generate a method which can be called to perform a
  /// permission check against the given resource &amp; action. The {templated} values will be replaced
  /// by the arguments passed to the generated method.
  /// {
  ///   name: "myDelegatedCheck"
  ///   permission_v2: {
  ///     resource: "irn:iam:{args.organisation_id}:myComponent:{args.my_component_id}"
  ///     action: "iam:getMyComponent"
  ///   };
  /// };
  /// </summary>
  public sealed partial class Delegation : pb::IMessage<Delegation> {
    private static readonly pb::MessageParser<Delegation> _parser = new pb::MessageParser<Delegation>(() => new Delegation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Delegation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Perms.PermsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delegation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delegation(Delegation other) : this() {
      name_ = other.name_;
      permissionV1_ = other.permissionV1_;
      permissionV2_ = other.permissionV2_ != null ? other.permissionV2_.Clone() : null;
      errorMessage_ = other.errorMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delegation Clone() {
      return new Delegation(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    //// The name of the permission check. This must be unique within an RPC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "permission_v1" field.</summary>
    public const int PermissionV1FieldNumber = 2;
    private string permissionV1_ = "";
    /// <summary>
    //// The permission template for v1 permissions. If set, will generate methods to delegate v1 permission checks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PermissionV1 {
      get { return permissionV1_; }
      set {
        permissionV1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "permission_v2" field.</summary>
    public const int PermissionV2FieldNumber = 3;
    private global::Perms.Permission permissionV2_;
    /// <summary>
    //// The permission template for v2 permissions. If set, will generate methods to delegate v2 permission checks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Perms.Permission PermissionV2 {
      get { return permissionV2_; }
      set {
        permissionV2_ = value;
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 4;
    private string errorMessage_ = "";
    /// <summary>
    //// The error message which is displayed to users when they are missing permissions. If empty, the missing
    //// permission is returned as the error message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Delegation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Delegation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (PermissionV1 != other.PermissionV1) return false;
      if (!object.Equals(PermissionV2, other.PermissionV2)) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PermissionV1.Length != 0) hash ^= PermissionV1.GetHashCode();
      if (permissionV2_ != null) hash ^= PermissionV2.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (PermissionV1.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PermissionV1);
      }
      if (permissionV2_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PermissionV2);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ErrorMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PermissionV1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PermissionV1);
      }
      if (permissionV2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PermissionV2);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Delegation other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PermissionV1.Length != 0) {
        PermissionV1 = other.PermissionV1;
      }
      if (other.permissionV2_ != null) {
        if (permissionV2_ == null) {
          PermissionV2 = new global::Perms.Permission();
        }
        PermissionV2.MergeFrom(other.PermissionV2);
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            PermissionV1 = input.ReadString();
            break;
          }
          case 26: {
            if (permissionV2_ == null) {
              PermissionV2 = new global::Perms.Permission();
            }
            input.ReadMessage(PermissionV2);
            break;
          }
          case 34: {
            ErrorMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
