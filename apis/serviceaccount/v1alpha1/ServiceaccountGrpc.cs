// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: improbable/spatialos/serviceaccount/v1alpha1/serviceaccount.proto
// </auto-generated>
// Original file comments:
// Protos defining the service account API.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Improbable.SpatialOS.ServiceAccount.V1Alpha1 {
  /// <summary>
  /// ServiceAccountService provides methods for managing service accounts.
  /// </summary>
  public static partial class ServiceAccountService
  {
    static readonly string __ServiceName = "improbable.spatialos.serviceaccount.v1alpha1.ServiceAccountService";

    static readonly grpc::Marshaller<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.CreateServiceAccountRequest> __Marshaller_improbable_spatialos_serviceaccount_v1alpha1_CreateServiceAccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.CreateServiceAccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount> __Marshaller_improbable_spatialos_serviceaccount_v1alpha1_ServiceAccount = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsRequest> __Marshaller_improbable_spatialos_serviceaccount_v1alpha1_ListServiceAccountsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsResponse> __Marshaller_improbable_spatialos_serviceaccount_v1alpha1_ListServiceAccountsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.UpdateServiceAccountRequest> __Marshaller_improbable_spatialos_serviceaccount_v1alpha1_UpdateServiceAccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.UpdateServiceAccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.DeleteServiceAccountRequest> __Marshaller_improbable_spatialos_serviceaccount_v1alpha1_DeleteServiceAccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.DeleteServiceAccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);

    static readonly grpc::Method<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.CreateServiceAccountRequest, global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount> __Method_CreateServiceAccount = new grpc::Method<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.CreateServiceAccountRequest, global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateServiceAccount",
        __Marshaller_improbable_spatialos_serviceaccount_v1alpha1_CreateServiceAccountRequest,
        __Marshaller_improbable_spatialos_serviceaccount_v1alpha1_ServiceAccount);

    static readonly grpc::Method<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsRequest, global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsResponse> __Method_ListServiceAccounts = new grpc::Method<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsRequest, global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListServiceAccounts",
        __Marshaller_improbable_spatialos_serviceaccount_v1alpha1_ListServiceAccountsRequest,
        __Marshaller_improbable_spatialos_serviceaccount_v1alpha1_ListServiceAccountsResponse);

    static readonly grpc::Method<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.UpdateServiceAccountRequest, global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount> __Method_UpdateServiceAccount = new grpc::Method<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.UpdateServiceAccountRequest, global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateServiceAccount",
        __Marshaller_improbable_spatialos_serviceaccount_v1alpha1_UpdateServiceAccountRequest,
        __Marshaller_improbable_spatialos_serviceaccount_v1alpha1_ServiceAccount);

    static readonly grpc::Method<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.DeleteServiceAccountRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteServiceAccount = new grpc::Method<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.DeleteServiceAccountRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteServiceAccount",
        __Marshaller_improbable_spatialos_serviceaccount_v1alpha1_DeleteServiceAccountRequest,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceaccountReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ServiceAccountService</summary>
    [grpc::BindServiceMethod(typeof(ServiceAccountService), "BindService")]
    public abstract partial class ServiceAccountServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount> CreateServiceAccount(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.CreateServiceAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsResponse> ListServiceAccounts(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// !!! WARNING !!!
      /// When this API is moved to beta/stable please use a
      /// standard UpdateServiceAccountResponse struct.
      /// !!! WARNING !!!
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount> UpdateServiceAccount(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.UpdateServiceAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// !!! WARNING !!!
      /// When this API is moved to beta/stable please add a
      /// (potentially empty) standard DeleteServiceAccountResponse struct.
      /// !!! WARNING !!!
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceAccount(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.DeleteServiceAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ServiceAccountService</summary>
    public partial class ServiceAccountServiceClient : grpc::ClientBase<ServiceAccountServiceClient>
    {
      /// <summary>Creates a new client for ServiceAccountService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ServiceAccountServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ServiceAccountService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ServiceAccountServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ServiceAccountServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ServiceAccountServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount CreateServiceAccount(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.CreateServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServiceAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount CreateServiceAccount(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.CreateServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateServiceAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount> CreateServiceAccountAsync(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.CreateServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServiceAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount> CreateServiceAccountAsync(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.CreateServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateServiceAccount, null, options, request);
      }
      public virtual global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsResponse ListServiceAccounts(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListServiceAccounts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsResponse ListServiceAccounts(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListServiceAccounts, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsResponse> ListServiceAccountsAsync(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListServiceAccountsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsResponse> ListServiceAccountsAsync(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListServiceAccounts, null, options, request);
      }
      /// <summary>
      /// !!! WARNING !!!
      /// When this API is moved to beta/stable please use a
      /// standard UpdateServiceAccountResponse struct.
      /// !!! WARNING !!!
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount UpdateServiceAccount(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.UpdateServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateServiceAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// !!! WARNING !!!
      /// When this API is moved to beta/stable please use a
      /// standard UpdateServiceAccountResponse struct.
      /// !!! WARNING !!!
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount UpdateServiceAccount(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.UpdateServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateServiceAccount, null, options, request);
      }
      /// <summary>
      /// !!! WARNING !!!
      /// When this API is moved to beta/stable please use a
      /// standard UpdateServiceAccountResponse struct.
      /// !!! WARNING !!!
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount> UpdateServiceAccountAsync(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.UpdateServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateServiceAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// !!! WARNING !!!
      /// When this API is moved to beta/stable please use a
      /// standard UpdateServiceAccountResponse struct.
      /// !!! WARNING !!!
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount> UpdateServiceAccountAsync(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.UpdateServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateServiceAccount, null, options, request);
      }
      /// <summary>
      /// !!! WARNING !!!
      /// When this API is moved to beta/stable please add a
      /// (potentially empty) standard DeleteServiceAccountResponse struct.
      /// !!! WARNING !!!
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteServiceAccount(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.DeleteServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServiceAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// !!! WARNING !!!
      /// When this API is moved to beta/stable please add a
      /// (potentially empty) standard DeleteServiceAccountResponse struct.
      /// !!! WARNING !!!
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteServiceAccount(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.DeleteServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteServiceAccount, null, options, request);
      }
      /// <summary>
      /// !!! WARNING !!!
      /// When this API is moved to beta/stable please add a
      /// (potentially empty) standard DeleteServiceAccountResponse struct.
      /// !!! WARNING !!!
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceAccountAsync(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.DeleteServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServiceAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// !!! WARNING !!!
      /// When this API is moved to beta/stable please add a
      /// (potentially empty) standard DeleteServiceAccountResponse struct.
      /// !!! WARNING !!!
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceAccountAsync(global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.DeleteServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteServiceAccount, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ServiceAccountServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ServiceAccountServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ServiceAccountServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateServiceAccount, serviceImpl.CreateServiceAccount)
          .AddMethod(__Method_ListServiceAccounts, serviceImpl.ListServiceAccounts)
          .AddMethod(__Method_UpdateServiceAccount, serviceImpl.UpdateServiceAccount)
          .AddMethod(__Method_DeleteServiceAccount, serviceImpl.DeleteServiceAccount).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ServiceAccountServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateServiceAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.CreateServiceAccountRequest, global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount>(serviceImpl.CreateServiceAccount));
      serviceBinder.AddMethod(__Method_ListServiceAccounts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsRequest, global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ListServiceAccountsResponse>(serviceImpl.ListServiceAccounts));
      serviceBinder.AddMethod(__Method_UpdateServiceAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.UpdateServiceAccountRequest, global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.ServiceAccount>(serviceImpl.UpdateServiceAccount));
      serviceBinder.AddMethod(__Method_DeleteServiceAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Improbable.SpatialOS.ServiceAccount.V1Alpha1.DeleteServiceAccountRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteServiceAccount));
    }

  }
}
#endregion
